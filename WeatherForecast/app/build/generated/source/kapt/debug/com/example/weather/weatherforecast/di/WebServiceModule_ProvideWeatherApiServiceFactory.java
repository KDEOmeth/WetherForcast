// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.di;

import com.example.weather.weatherforecast.features.home.data.remote.WeatherApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WebServiceModule_ProvideWeatherApiServiceFactory implements Factory<WeatherApiService> {
  private final WebServiceModule module;

  private final Provider<Retrofit> retrofitProvider;

  public WebServiceModule_ProvideWeatherApiServiceFactory(WebServiceModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public WeatherApiService get() {
    return provideWeatherApiService(module, retrofitProvider.get());
  }

  public static WebServiceModule_ProvideWeatherApiServiceFactory create(WebServiceModule module,
      Provider<Retrofit> retrofitProvider) {
    return new WebServiceModule_ProvideWeatherApiServiceFactory(module, retrofitProvider);
  }

  public static WeatherApiService provideWeatherApiService(WebServiceModule instance,
      Retrofit retrofit) {
    return Preconditions.checkNotNull(instance.provideWeatherApiService(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
