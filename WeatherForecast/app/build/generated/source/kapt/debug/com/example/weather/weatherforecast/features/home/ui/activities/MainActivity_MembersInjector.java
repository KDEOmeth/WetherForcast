// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.features.home.ui.activities;

import com.example.weather.weatherforecast.utils.SessionManager;
import com.example.weather.weatherforecast.utils.viewmodel.ViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<SessionManager> sessionManagerProvider;

  private final Provider<ViewModelFactory> viewModelFactoryProvider;

  public MainActivity_MembersInjector(Provider<SessionManager> sessionManagerProvider,
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    this.sessionManagerProvider = sessionManagerProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<SessionManager> sessionManagerProvider,
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    return new MainActivity_MembersInjector(sessionManagerProvider, viewModelFactoryProvider);}

  @Override
  public void injectMembers(MainActivity instance) {
    injectSessionManager(instance, sessionManagerProvider.get());
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.example.weather.weatherforecast.features.home.ui.activities.MainActivity.sessionManager")
  public static void injectSessionManager(MainActivity instance, SessionManager sessionManager) {
    instance.sessionManager = sessionManager;
  }

  @InjectedFieldSignature("com.example.weather.weatherforecast.features.home.ui.activities.MainActivity.viewModelFactory")
  public static void injectViewModelFactory(MainActivity instance,
      ViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
