// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.di;

import android.content.Context;
import com.example.weather.weatherforecast.utils.db.MainRoomDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvidesRoomDatabaseFactory implements Factory<MainRoomDatabase> {
  private final RoomModule module;

  private final Provider<Context> contextProvider;

  public RoomModule_ProvidesRoomDatabaseFactory(RoomModule module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public MainRoomDatabase get() {
    return providesRoomDatabase(module, contextProvider.get());
  }

  public static RoomModule_ProvidesRoomDatabaseFactory create(RoomModule module,
      Provider<Context> contextProvider) {
    return new RoomModule_ProvidesRoomDatabaseFactory(module, contextProvider);
  }

  public static MainRoomDatabase providesRoomDatabase(RoomModule instance, Context context) {
    return Preconditions.checkNotNull(instance.providesRoomDatabase(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
