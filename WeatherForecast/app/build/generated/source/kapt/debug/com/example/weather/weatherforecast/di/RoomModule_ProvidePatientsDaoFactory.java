// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.di;

import com.example.weather.weatherforecast.features.home.data.local.CitiesDao;
import com.example.weather.weatherforecast.utils.db.MainRoomDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvidePatientsDaoFactory implements Factory<CitiesDao> {
  private final RoomModule module;

  private final Provider<MainRoomDatabase> dbProvider;

  public RoomModule_ProvidePatientsDaoFactory(RoomModule module,
      Provider<MainRoomDatabase> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public CitiesDao get() {
    return providePatientsDao(module, dbProvider.get());
  }

  public static RoomModule_ProvidePatientsDaoFactory create(RoomModule module,
      Provider<MainRoomDatabase> dbProvider) {
    return new RoomModule_ProvidePatientsDaoFactory(module, dbProvider);
  }

  public static CitiesDao providePatientsDao(RoomModule instance, MainRoomDatabase db) {
    return Preconditions.checkNotNull(instance.providePatientsDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
