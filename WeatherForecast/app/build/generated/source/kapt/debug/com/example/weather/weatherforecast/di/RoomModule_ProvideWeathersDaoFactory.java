// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.di;

import com.example.weather.weatherforecast.features.home.data.local.WeathersDao;
import com.example.weather.weatherforecast.utils.db.MainRoomDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideWeathersDaoFactory implements Factory<WeathersDao> {
  private final RoomModule module;

  private final Provider<MainRoomDatabase> dbProvider;

  public RoomModule_ProvideWeathersDaoFactory(RoomModule module,
      Provider<MainRoomDatabase> dbProvider) {
    this.module = module;
    this.dbProvider = dbProvider;
  }

  @Override
  public WeathersDao get() {
    return provideWeathersDao(module, dbProvider.get());
  }

  public static RoomModule_ProvideWeathersDaoFactory create(RoomModule module,
      Provider<MainRoomDatabase> dbProvider) {
    return new RoomModule_ProvideWeathersDaoFactory(module, dbProvider);
  }

  public static WeathersDao provideWeathersDao(RoomModule instance, MainRoomDatabase db) {
    return Preconditions.checkNotNull(instance.provideWeathersDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
