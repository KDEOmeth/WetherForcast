// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.features.home.ui.fragments;

import com.example.weather.weatherforecast.utils.viewmodel.ViewModelFactory;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CityWeatherFragment_MembersInjector implements MembersInjector<CityWeatherFragment> {
  private final Provider<ViewModelFactory> viewModelFactoryProvider;

  public CityWeatherFragment_MembersInjector(Provider<ViewModelFactory> viewModelFactoryProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<CityWeatherFragment> create(
      Provider<ViewModelFactory> viewModelFactoryProvider) {
    return new CityWeatherFragment_MembersInjector(viewModelFactoryProvider);}

  @Override
  public void injectMembers(CityWeatherFragment instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.example.weather.weatherforecast.features.home.ui.fragments.CityWeatherFragment.viewModelFactory")
  public static void injectViewModelFactory(CityWeatherFragment instance,
      ViewModelFactory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
