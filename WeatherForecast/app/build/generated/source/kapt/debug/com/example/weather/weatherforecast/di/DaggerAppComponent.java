// Generated by Dagger (https://dagger.dev).
package com.example.weather.weatherforecast.di;

import android.content.Context;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import com.example.weather.weatherforecast.features.home.data.CitiesRepositoryImpl;
import com.example.weather.weatherforecast.features.home.data.CitiesRepositoryImpl_Factory;
import com.example.weather.weatherforecast.features.home.data.local.CitiesDao;
import com.example.weather.weatherforecast.features.home.data.local.WeathersDao;
import com.example.weather.weatherforecast.features.home.data.remote.WeatherApiService;
import com.example.weather.weatherforecast.features.home.domain.CitiesRepository;
import com.example.weather.weatherforecast.features.home.domain.GetCityWeatherByIdUseCase;
import com.example.weather.weatherforecast.features.home.domain.GetCityWeatherByIdUseCase_Factory;
import com.example.weather.weatherforecast.features.home.domain.GetFavoriteCitiesUseCase;
import com.example.weather.weatherforecast.features.home.domain.GetFavoriteCitiesUseCase_Factory;
import com.example.weather.weatherforecast.features.home.domain.PopulateCitiesUseCase;
import com.example.weather.weatherforecast.features.home.domain.PopulateCitiesUseCase_Factory;
import com.example.weather.weatherforecast.features.home.domain.SearchForCityUseCase;
import com.example.weather.weatherforecast.features.home.domain.SearchForCityUseCase_Factory;
import com.example.weather.weatherforecast.features.home.domain.SetDefaultCityUseCase;
import com.example.weather.weatherforecast.features.home.domain.SetDefaultCityUseCase_Factory;
import com.example.weather.weatherforecast.features.home.domain.UpdateCityUseCase;
import com.example.weather.weatherforecast.features.home.domain.UpdateCityUseCase_Factory;
import com.example.weather.weatherforecast.features.home.ui.activities.MainActivity;
import com.example.weather.weatherforecast.features.home.ui.activities.MainActivity_MembersInjector;
import com.example.weather.weatherforecast.features.home.ui.fragments.CityWeatherFragment;
import com.example.weather.weatherforecast.features.home.ui.fragments.CityWeatherFragment_MembersInjector;
import com.example.weather.weatherforecast.features.home.ui.fragments.HomeFragment;
import com.example.weather.weatherforecast.features.home.ui.fragments.HomeFragment_MembersInjector;
import com.example.weather.weatherforecast.features.home.ui.fragments.SearchCityFragment;
import com.example.weather.weatherforecast.features.home.ui.fragments.SearchCityFragment_MembersInjector;
import com.example.weather.weatherforecast.features.home.ui.viewmodels.WeatherViewModel;
import com.example.weather.weatherforecast.features.home.ui.viewmodels.WeatherViewModel_Factory;
import com.example.weather.weatherforecast.utils.SessionManager;
import com.example.weather.weatherforecast.utils.SessionManager_Factory;
import com.example.weather.weatherforecast.utils.db.MainRoomDatabase;
import com.example.weather.weatherforecast.utils.viewmodel.ViewModelFactory;
import com.example.weather.weatherforecast.utils.viewmodel.ViewModelFactory_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> providePrefsProvider;

  private Provider<SharedPreferences.Editor> providePrefsEditorProvider;

  private Provider<SessionManager> sessionManagerProvider;

  private Provider<MainRoomDatabase> providesRoomDatabaseProvider;

  private Provider<CitiesDao> providePatientsDaoProvider;

  private Provider<WeathersDao> provideWeathersDaoProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideMainRetrofitProvider;

  private Provider<WeatherApiService> provideWeatherApiServiceProvider;

  private Provider<CitiesRepositoryImpl> citiesRepositoryImplProvider;

  private Provider<CitiesRepository> bindCitiesRepositoryProvider;

  private Provider<PopulateCitiesUseCase> populateCitiesUseCaseProvider;

  private Provider<GetFavoriteCitiesUseCase> getFavoriteCitiesUseCaseProvider;

  private Provider<UpdateCityUseCase> updateCityUseCaseProvider;

  private Provider<SearchForCityUseCase> searchForCityUseCaseProvider;

  private Provider<SetDefaultCityUseCase> setDefaultCityUseCaseProvider;

  private Provider<GetCityWeatherByIdUseCase> getCityWeatherByIdUseCaseProvider;

  private Provider<WeatherViewModel> weatherViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(ContextModule contextModuleParam, RoomModule roomModuleParam,
      WebServiceModule webServiceModuleParam, PrefsModule prefsModuleParam) {

    initialize(contextModuleParam, roomModuleParam, webServiceModuleParam, prefsModuleParam);
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ContextModule contextModuleParam, final RoomModule roomModuleParam,
      final WebServiceModule webServiceModuleParam, final PrefsModule prefsModuleParam) {
    this.provideContextProvider = DoubleCheck.provider(ContextModule_ProvideContextFactory.create(contextModuleParam));
    this.providePrefsProvider = DoubleCheck.provider(PrefsModule_ProvidePrefsFactory.create(prefsModuleParam, provideContextProvider));
    this.providePrefsEditorProvider = DoubleCheck.provider(PrefsModule_ProvidePrefsEditorFactory.create(prefsModuleParam, providePrefsProvider));
    this.sessionManagerProvider = DoubleCheck.provider(SessionManager_Factory.create(providePrefsProvider, providePrefsEditorProvider));
    this.providesRoomDatabaseProvider = DoubleCheck.provider(RoomModule_ProvidesRoomDatabaseFactory.create(roomModuleParam, provideContextProvider));
    this.providePatientsDaoProvider = DoubleCheck.provider(RoomModule_ProvidePatientsDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.provideWeathersDaoProvider = DoubleCheck.provider(RoomModule_ProvideWeathersDaoFactory.create(roomModuleParam, providesRoomDatabaseProvider));
    this.provideOkHttpClientProvider = DoubleCheck.provider(WebServiceModule_ProvideOkHttpClientFactory.create(webServiceModuleParam));
    this.provideMainRetrofitProvider = DoubleCheck.provider(WebServiceModule_ProvideMainRetrofitFactory.create(webServiceModuleParam, provideOkHttpClientProvider));
    this.provideWeatherApiServiceProvider = DoubleCheck.provider(WebServiceModule_ProvideWeatherApiServiceFactory.create(webServiceModuleParam, provideMainRetrofitProvider));
    this.citiesRepositoryImplProvider = CitiesRepositoryImpl_Factory.create(providePatientsDaoProvider, provideWeathersDaoProvider, provideWeatherApiServiceProvider, provideContextProvider);
    this.bindCitiesRepositoryProvider = DoubleCheck.provider((Provider) citiesRepositoryImplProvider);
    this.populateCitiesUseCaseProvider = PopulateCitiesUseCase_Factory.create(bindCitiesRepositoryProvider);
    this.getFavoriteCitiesUseCaseProvider = GetFavoriteCitiesUseCase_Factory.create(bindCitiesRepositoryProvider);
    this.updateCityUseCaseProvider = UpdateCityUseCase_Factory.create(bindCitiesRepositoryProvider);
    this.searchForCityUseCaseProvider = SearchForCityUseCase_Factory.create(bindCitiesRepositoryProvider);
    this.setDefaultCityUseCaseProvider = SetDefaultCityUseCase_Factory.create(bindCitiesRepositoryProvider);
    this.getCityWeatherByIdUseCaseProvider = GetCityWeatherByIdUseCase_Factory.create(bindCitiesRepositoryProvider);
    this.weatherViewModelProvider = WeatherViewModel_Factory.create(populateCitiesUseCaseProvider, getFavoriteCitiesUseCaseProvider, updateCityUseCaseProvider, searchForCityUseCaseProvider, setDefaultCityUseCaseProvider, getCityWeatherByIdUseCaseProvider, sessionManagerProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(WeatherViewModel.class, (Provider) weatherViewModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public Context getContext() {
    return provideContextProvider.get();}

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);}

  @Override
  public void inject(CityWeatherFragment cityWeatherFragment) {
    injectCityWeatherFragment(cityWeatherFragment);}

  @Override
  public void inject(SearchCityFragment searchCityFragment) {
    injectSearchCityFragment(searchCityFragment);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectSessionManager(instance, sessionManagerProvider.get());
    MainActivity_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  private CityWeatherFragment injectCityWeatherFragment(CityWeatherFragment instance) {
    CityWeatherFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  private SearchCityFragment injectSearchCityFragment(SearchCityFragment instance) {
    SearchCityFragment_MembersInjector.injectViewModelFactory(instance, viewModelFactoryProvider.get());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(ContextModule contextModule) {
      Preconditions.checkNotNull(contextModule);
      return new DaggerAppComponent(contextModule, new RoomModule(), new WebServiceModule(), new PrefsModule());
    }
  }
}
